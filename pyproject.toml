[tool.poetry]
name = "eclypse"
version = "0.7.4"
description = "an Edge-CLoud pYthon Platform for Simulated runtime Environments"
authors = [
    "Jacopo Massa <jacopo.massa@di.unipi.it>",
    "Valerio De Caro <valerio.decaro@di.unipi.it>",
]
maintainers = [
    "Jacopo Massa <jacopo.massa@di.unipi.it>",
    "Valerio De Caro <valerio.decaro@di.unipi.it>",
]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/eclypse-org/eclypse"
repository = "https://github.com/eclypse-org/eclypse"

[tool.poetry.build]
script = "build.py"
generate-setup-file = false

[tool.poetry.dependencies]
python = ">=3.10, <3.14"
pandas = "^2.3.0"
tensorboardx = "^2.6.2.2"
ray = { extras = ["default"], version = "^2.8.0" }
aiofiles = "^24.1.0"
eclypse-core = "^0.7.4"

[tool.poetry.extras]
remote = ["ray"]
tboard = ["tensorboardX"]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
commitizen = "^4.8.2"
pre-commit = "^4.2.0"
isort = "^6.0.1"
pycln = "^2.5.0"
pylint = "^3.3.7"
docformatter = { extras = ["tomli"], version = "^1.7.7" }

[tool.poetry.group.deploy]
optional = true

[tool.poetry.group.deploy.dependencies]
mypy = "^1.16.0"
wheel = "^0.45.1"
setuptools = "^80.9.0"
twine = "^6.1.0"

[tool.poetry.group.docs]
optional = true

# To build the docs, at least python3.10 is required
[tool.poetry.group.docs.dependencies]
sphinx = { version = "^8.2.3", python = "^3.11" }
myst-parser = { version = "^4.0.1", python = "^3.11" }
sphinx-copybutton = { version = "^0.5.2", python = "^3.11" }
jinja2 = "^3.1.6"
docformatter = { extras = ["tomli"], version = "^1.7.7" }
sphinx-autobuild = "^2024.10.3"
enum-tools = "^0.13.0"
sphinx-favicon = "^1.0.1"
sphinx-design = "^0.6.1"
sphinx-icon = "^0.2.2"
pydata-sphinx-theme = "^0.16.1"

[build-system]
requires = ["poetry-core", "setuptools", "wheel"]
build-backend = "poetry.core.masonry.api"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.7.4"
tag_format = "$version"
version_files = ["pyproject.toml:version", "eclypse/__init__.py:__version__"]

[tool.pycln]
all = true

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 2
filter_files = true
skip = ["__init__.py"]

[tool.docformatter]
recursive = true
black = true
diff = true
tab-width = 4

[tool.pytest.ini_options]
testpaths = "tests"
addopts = "--cov-report=xml --cov-report=term-missing --cov"
filterwarnings = ["ignore::DeprecationWarning"]
